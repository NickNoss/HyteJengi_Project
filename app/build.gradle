plugins {
    id 'com.android.application'
}

android {
    namespace 'fi.nikitanoss.hytejengi_project'
    compileSdk 32

    defaultConfig {
        applicationId "fi.nikitanoss.hytejengi_project"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'

    //for jackson
    implementation 'com.squareup.retrofit2:converter-jackson:2.7.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.5'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.8.5'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.8.5'

    //for api
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    //for OkHttps
    implementation 'com.squareup.okhttp3:okhttp:3.0.1'



    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}

import com.android.build.gradle.internal.api.ApplicationVariantImpl

android.applicationVariants.all {
    variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "${rootProject.name} API Documentation (${project.android.defaultConfig.versionName})"
        group = "Documentation"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        doFirst {
            classpath = project.files(variant.javaCompileProvider.get().classpath.files,
                    project.android.getBootClasspath())
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        exclude "**/R"
        exclude "**/R.**"
        exclude "**/R\$**"
        exclude "**/BuildConfig*"

        options {
            encoding = "utf-8"
            docEncoding = "utf-8"
            windowTitle = "${rootProject.name} API Documentation (${project.android.defaultConfig.versionName})"
            memberLevel = JavadocMemberLevel.PRIVATE
            linkSource = false
            author = true
            version = true
            use = true

            links("https://developer.android.com/reference")
            linksOffline("https://developer.android.com/reference",
                    "https://d.android.com/reference/androidx")
        }

        destinationDir = new File(getBuildDir(), "outputs/javadoc/${variant.dirName}")

        doLast {
            println("Javadoc generated at ${destinationDir}")
        }
    }
}